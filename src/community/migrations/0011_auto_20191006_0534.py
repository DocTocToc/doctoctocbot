# Generated by Django 2.2.4 on 2019-10-06 01:32
import logging

from django.db import migrations
from django.db.utils import DatabaseError, IntegrityError
from django.conf import settings

logger = logging.getLogger(__name__)

def create_first_community(apps, schema_editor):
    Community = apps.get_model('community', 'Community')
    # Return if there is already a Community object in the database
    if Community.objects.all():
        return
    Account = apps.get_model('bot', 'Account')
    Hashtag = apps.get_model('conversation', 'Hashtag')
    Category = apps.get_model('conversation', 'Category')
    Project = apps.get_model('crowdfunding', 'Project')
    Site = apps.get_model('sites', 'Site')
    
    # name str
    try:
        name = settings.COMMUNITY_NAME
    except AttributeError as e:
        logger.debug("Missing settings attribute.", e)
        return
    
    # account str
    try:
        username = settings.COMMUNITY_ACCOUNT_USERNAME
    except AttributeError as e:
        logger.debug("Missing settings attribute.", e)
        return
        
    # hashtag list
    try:
        hashtag_lst = settings.COMMUNITY_HASHTAG_LIST
    except AttributeError as e:
        logger.debug("Missing settings attribute.", e)
        return
    
    # membership
    try:
        membership_lst = settings.COMMUNITY_MEMBERSHIP_LIST
    except AttributeError as e:
        logger.debug("Missing settings attribute.", e)
        return
        
    # site
    try:
        site_id = settings.COMMUNITY_SITE_ID
    except AttributeError as e:
        logger.debug("Missing settings attribute.", e)
        return

    # crowdfunding
    try:
        crowdfunding_project_name = settings.COMMUNITY_CROWDFUNDING
    except AttributeError as e:
        logger.debug("Missing settings attribute.", e)
        crowdfunding_project_name = None
    
    try:
        account_mi = Account.objects.get(username=username)
    except Account.DoesNotExist as e:
        logger.debug(f"No Account was found with the username {username}.", e)
        return

    hashtag_mi_lst = []
    for hashtag in hashtag_lst:
        try:
            hashtag_mi, _ = Hashtag.objects.get_or_create(hashtag=hashtag)
            hashtag_mi_lst.append(hashtag_mi)
        except DatabaseError as e:
            logger.debug(e)
            return
        
    category_mi_lst = []
    for category_name in membership_lst:
        try:
            category_mi = Category.objects.get(name=category_name)
            category_mi_lst.append(category_mi)
        except DatabaseError as e:
            logger.debug(e)
            return
    
    try:
        site_mi = Site.objects.get(pk=site_id)
    except Site.DoesNotExist as e:
        logger.debug(e)
        return
    
    try:
        project_mi = Project.objects.get(name=crowdfunding_project_name)
    except Project.DoesNotExist as e:
        logger.debug(
            "Project named '{crowdfunding_project_name}' not found. "
            "Community will be created but not linked to any crowdfunding.",
            e
        )
        project_mi = None
    
    try:
        community = Community.objects.create(
            name=name,
            account=account_mi,
            site=site_mi,
            crowdfunding= project_mi
        )
    except IntegrityError as e:
        logger.debug(e)
    except DatabaseError as e:
        logger.debug(e)

    if community:
        community.hashtag.set(hashtag_mi_lst)
        community.membership.set(category_mi_lst)


class Migration(migrations.Migration):

    dependencies = [
        ('community', '0010_auto_20191006_0523'),
    ]

    operations = [
        migrations.RunPython(create_first_community),
    ]
